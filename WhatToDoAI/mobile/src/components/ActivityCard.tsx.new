// WhatToDoAI/mobile/src/components/ActivityCard.tsx

import React from 'react';
import { Box, Text, VStack, Heading, Pressable, Image } from '@gluestack-ui/themed';
import { Activity } from '../types/activity'; // Assuming Activity type is defined

interface ActivityCardProps {
    activity: Activity;
    onPress: () => void;
}

const ActivityCard: React.FC<ActivityCardProps> = ({ activity, onPress }) => {
    // Basic placeholder card structure
    return (
        <Pressable onPress={onPress} mb="$4">
            <Box bg="$backgroundLight0" borderRadius="$lg" overflow="hidden" shadow="$2">
                {/* Image */}
                {activity.image_urls && activity.image_urls.length > 0 ? (
                    <Box h={150} bg="$backgroundLight300" justifyContent="center" alignItems="center">
                        <Image 
                            source={{ uri: activity.image_urls[0] }}
                            alt={activity.name || 'Activity Image'}
                            style={{ width: '100%', height: 150 }}
                            resizeMode="cover"
                        />
                    </Box>
                ) : (
                    <Box h={150} bg="$backgroundLight300" justifyContent="center" alignItems="center">
                        <Text>No Image Available</Text>
                    </Box>
                )}
                <VStack p="$4">
                    <Heading size="md" mb="$1">{activity.name || 'Unnamed Activity'}</Heading>
                    <Text size="sm" color="$textLight600" numberOfLines={2}>
                        {activity.description || 'No description available.'}
                    </Text>
                    <Text size="xs" color="$textLight500" mt="$2">
                        {activity.venue?.name || 'Location not specified'}
                    </Text>
                    {/* Rating if available */}
                    {(activity.average_rating || activity.rating) && (
                        <Text size="xs" color="$textLight500" mt="$1">
                            Rating: {activity.average_rating || activity.rating}/5 
                            {activity.review_count ? ` (${activity.review_count} reviews)` : ''}
                        </Text>
                    )}
                    {/* Price info if available */}
                    {activity.price_info && (
                        <Text size="xs" color="$textLight500" mt="$1">
                            {activity.price_info}
                        </Text>
                    )}
                    {/* Source badge */}
                    <Box 
                        position="absolute" 
                        top={0} 
                        right={0} 
                        bg={activity.source === 'Eventbrite' ? '$blue100' : '$green100'} 
                        px="$2" 
                        py="$1" 
                        borderBottomLeftRadius="$md"
                    >
                        <Text size="2xs" color={activity.source === 'Eventbrite' ? '$blue800' : '$green800'}>
                            {activity.source}
                        </Text>
                    </Box>
                </VStack>
            </Box>
        </Pressable>
    );
};

export default ActivityCard; // Ensure default export
