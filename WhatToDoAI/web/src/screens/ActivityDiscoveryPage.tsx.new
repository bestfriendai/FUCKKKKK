// WhatToDoAI/web/src/screens/ActivityDiscoveryPage.tsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { searchActivities } from '../services/activities';
import { Activity, ActivitySearchParams } from '../types/activity';
import ActivityCard from '../components/ActivityCard';
import { APP_CONSTANTS } from '../config';

// Styled components
const Container = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 24px;
`;

const Header = styled.div`
  margin-bottom: 32px;
`;

const Title = styled.h1`
  font-size: 32px;
  font-weight: 700;
  margin: 0 0 16px 0;
  color: #333;
`;

const Subtitle = styled.p`
  font-size: 18px;
  color: #666;
  margin: 0;
`;

const FiltersContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  margin-bottom: 32px;
  padding: 16px;
  background-color: #f8fafc;
  border-radius: 8px;
`;

const FilterGroup = styled.div`
  display: flex;
  flex-direction: column;
  min-width: 200px;
`;

const FilterLabel = styled.label`
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 8px;
  color: #4a5568;
`;

const Select = styled.select`
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 4px;
  font-size: 14px;
  background-color: white;
`;

const Input = styled.input`
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 4px;
  font-size: 14px;
`;

const Button = styled.button`
  padding: 8px 16px;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
  align-self: flex-end;
  
  &:hover {
    background-color: #0055aa;
  }
  
  &.secondary {
    background-color: white;
    color: #0066cc;
    border: 1px solid #0066cc;
    
    &:hover {
      background-color: #f5f9ff;
    }
  }
`;

const ActivitiesGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
`;

const LoadMoreButton = styled.button`
  display: block;
  width: 200px;
  margin: 32px auto;
  padding: 12px 24px;
  background-color: white;
  color: #0066cc;
  border: 1px solid #0066cc;
  border-radius: 4px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
  
  &:hover {
    background-color: #f5f9ff;
  }
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  font-size: 18px;
  color: #666;
`;

const ErrorContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 32px;
  background-color: #fff5f5;
  border-radius: 8px;
  color: #e53e3e;
  text-align: center;
  
  h2 {
    margin-bottom: 16px;
  }
`;

const NoResultsContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 64px 32px;
  background-color: #f8fafc;
  border-radius: 8px;
  text-align: center;
  
  h2 {
    margin-bottom: 16px;
    color: #4a5568;
  }
  
  p {
    color: #718096;
    margin-bottom: 24px;
  }
`;

const ActivityDiscoveryPage: React.FC = () => {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchParams, setSearchParams] = useState<ActivitySearchParams>({
    location: {
      latitude: APP_CONSTANTS.DEFAULT_LOCATION.latitude,
      longitude: APP_CONSTANTS.DEFAULT_LOCATION.longitude,
      radius: APP_CONSTANTS.DEFAULT_RADIUS,
    },
    page: 1,
    pageSize: APP_CONSTANTS.DEFAULT_PAGE_SIZE,
  });
  const [hasMore, setHasMore] = useState(true);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Get user's location if available
    navigator.geolocation.getCurrentPosition(
      (position) => {
        setSearchParams(prev => ({
          ...prev,
          location: {
            ...prev.location,
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          }
        }));
      },
      (error) => {
        console.warn('Error getting location:', error.message);
        // Continue with default location
      }
    );
  }, []);
  
  useEffect(() => {
    fetchActivities();
  }, [searchParams.location.latitude, searchParams.location.longitude]);
  
  const fetchActivities = async (loadMore = false) => {
    setLoading(true);
    setError(null);
    
    try {
      const params = {
        ...searchParams,
        page: loadMore ? searchParams.page + 1 : 1,
      };
      
      const results = await searchActivities(params);
      
      if (results) {
        if (loadMore) {
          setActivities(prev => [...prev, ...results]);
          setSearchParams(prev => ({ ...prev, page: prev.page + 1 }));
        } else {
          setActivities(results);
          setSearchParams(prev => ({ ...prev, page: 1 }));
        }
        
        // Check if we have more results to load
        setHasMore(results.length >= (searchParams.pageSize || APP_CONSTANTS.DEFAULT_PAGE_SIZE));
      } else {
        setError('Failed to fetch activities');
      }
    } catch (err) {
      console.error('Error fetching activities:', err);
      setError('An error occurred while fetching activities');
    } finally {
      setLoading(false);
    }
  };
  
  const handleSearch = () => {
    fetchActivities();
  };
  
  const handleLoadMore = () => {
    fetchActivities(true);
  };
  
  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    if (name === 'radius') {
      setSearchParams(prev => ({
        ...prev,
        location: {
          ...prev.location,
          radius: parseInt(value) || APP_CONSTANTS.DEFAULT_RADIUS,
        }
      }));
    } else if (name === 'query') {
      setSearchParams(prev => ({
        ...prev,
        query: value,
      }));
    } else if (name === 'sortBy') {
      setSearchParams(prev => ({
        ...prev,
        sortBy: value as any,
      }));
    } else if (name === 'isFree') {
      setSearchParams(prev => ({
        ...prev,
        filters: {
          ...prev.filters,
          isFree: value === 'true',
        }
      }));
    }
  };
  
  return (
    <Container>
      <Header>
        <Title>Discover Activities</Title>
        <Subtitle>Find exciting things to do near you</Subtitle>
      </Header>
      
      <FiltersContainer>
        <FilterGroup>
          <FilterLabel htmlFor="query">Search</FilterLabel>
          <Input 
            type="text" 
            id="query" 
            name="query" 
            placeholder="Keywords..." 
            value={searchParams.query || ''} 
            onChange={handleFilterChange}
          />
        </FilterGroup>
        
        <FilterGroup>
          <FilterLabel htmlFor="radius">Distance (km)</FilterLabel>
          <Select 
            id="radius" 
            name="radius" 
            value={searchParams.location.radius || APP_CONSTANTS.DEFAULT_RADIUS} 
            onChange={handleFilterChange}
          >
            <option value="5">5 km</option>
            <option value="10">10 km</option>
            <option value="25">25 km</option>
            <option value="50">50 km</option>
            <option value="100">100 km</option>
          </Select>
        </FilterGroup>
        
        <FilterGroup>
          <FilterLabel htmlFor="sortBy">Sort By</FilterLabel>
          <Select 
            id="sortBy" 
            name="sortBy" 
            value={searchParams.sortBy || 'relevance'} 
            onChange={handleFilterChange}
          >
            <option value="relevance">Relevance</option>
            <option value="distance">Distance</option>
            <option value="rating">Rating</option>
            <option value="price">Price</option>
          </Select>
        </FilterGroup>
        
        <FilterGroup>
          <FilterLabel htmlFor="isFree">Price</FilterLabel>
          <Select 
            id="isFree" 
            name="isFree" 
            value={searchParams.filters?.isFree ? 'true' : 'false'} 
            onChange={handleFilterChange}
          >
            <option value="false">All Prices</option>
            <option value="true">Free Only</option>
          </Select>
        </FilterGroup>
        
        <FilterGroup>
          <Button onClick={handleSearch}>Search</Button>
        </FilterGroup>
      </FiltersContainer>
      
      {loading && activities.length === 0 ? (
        <LoadingContainer>
          Loading activities...
        </LoadingContainer>
      ) : error ? (
        <ErrorContainer>
          <h2>Error</h2>
          <p>{error}</p>
          <Button className="secondary" onClick={handleSearch}>Try Again</Button>
        </ErrorContainer>
      ) : activities.length === 0 ? (
        <NoResultsContainer>
          <h2>No Activities Found</h2>
          <p>Try adjusting your search filters or exploring a different area.</p>
          <Button onClick={handleSearch}>Reset Filters</Button>
        </NoResultsContainer>
      ) : (
        <>
          <ActivitiesGrid>
            {activities.map((activity) => (
              <ActivityCard 
                key={activity.activity_id} 
                activity={activity} 
              />
            ))}
          </ActivitiesGrid>
          
          {hasMore && (
            <LoadMoreButton onClick={handleLoadMore} disabled={loading}>
              {loading ? 'Loading...' : 'Load More'}
            </LoadMoreButton>
          )}
        </>
      )}
    </Container>
  );
};

export default ActivityDiscoveryPage;
